# 2일차 검색 학습

# match - 일반적인 쿼리, or 조건으로 검색, term 단위로 검색
# match_phrase - AND와 동일, 구문 단위로 검색, 공백을 포함해서 순서도 정확히 일치하는 문서(doc, row) 검색

# table drop 개념
DELETE my_index
POST my_index/_bulk
{"index":{"_id":1}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를"}
{"index":{"_id":2}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 나는 괴로워했다"}
{"index":{"_id":3}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 너는 괴로워했다"}
{"index":{"_id":4}}
{"message":"chrome google Chrome Google"}
{"index":{"_id":5}}
{"message":"하늘사 Google Chrome"}
{"index":{"_id":6}}
{"message":"pink"}
{"index":{"_id":7}}
{"message":"pinkRed"}
{"index":{"_id":8}}
{"message":"pink red blue"}
{"index":{"_id":9}}
{"message":"pink red blue black"}
{"index":{"_id":10}}
{"message":"pink red blue black green"}
{"index":{"_id":11}}
{"message":"pink blue red black green"}
{"index":{"_id":12}}
{"message":"pink pink"}
{"index":{"_id":13}}
{"message":"pink blue yellow red black green"}

GET my_index
GET my_index/_search

# id가 1인 doc(row)만 검색
GET my_index/_doc/1

# Chrome Google이 포함된 문서 검색
# 모든 단어가 term으로 구성돼서 역인덱싱되어 저장
# Chrome Google 또한 개별 term으로 저장
# 붙여서 검색해도 Chrome과 Google을 개별 term으로 검색
# 순서는 중요하지 않고 포함만 되어 있으면 데이터(doc) 검색
# select * from my_index where message='Chrome' or message='Google';
GET my_index/_search
{
  "query": {
    "match": {
      "message": "Chrome Google"
    }
  }
}

GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink green"
    }
  }
}

# 검색 옵션 추가
# slop: query의 term 사이에 특정 term이 올 수 있는 최대 개수 고정 가능
GET my_index/_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "pink red",
        "slop": 1
      }
    }
  }
}

GET my_index/_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "red pink",
        "slop": 0
      }
    }
  }
}

# 복합 쿼리: 검색 우선 순위 조정
# https://www.elastic.co/guide/en/elasticsearch/reference/7.13/query-dsl-bool-query.html
# https://esbook.kimjmin.net/05-search/5.2-bool
# bool query - must/must_not/should/filter
# _score 속성 값에 대한 정확도 랭킹 확인
GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink blue"
      }
    }
}

# 01 - should
GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink blue"
      }
    }
}

GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink*"
      }
    }
}

GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink blue"
    }
  }
}

# must : 쿼리가 참인 도큐먼트들을 검색합니다. 
# must_not : 쿼리가 거짓인 도큐먼트들을 검색합니다. 
# should : 검색 결과 중 이 쿼리에 해당하는 도큐먼트의 점수를 높입니다. 
# filter : 쿼리가 참인 도큐먼트를 검색하지만 스코어를 계산하지 않습니다. must 보다 검색 속도가 빠르고 캐싱이 가능합니다.
GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "pink blue"
          }
        }
      ],
      "should": [
        {
          "match_phrase": {
            "message": "pink blue"
          }
        }
      ]
    }
  }
}

GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "google"
          }
        }
      ],
      "filter": [
        {
          "bool": {
            "must_not": [
              {
                "match" : {
                  "message": "하늘사"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "google"
          }
        }
      ],
      "filter": [
        {
          "bool": {
            "must_not": [
              {
                "match" : {
                  "message": "Google"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

# ES의 상태 체크하는 명령어
GET /_cluster/health

# 검색 시 기본적으로 10개의 doc만 검색되는 부분 해소하는 옵션
GET my_index/_search
{
  "size": 5
}


# range query 학습
# html entity와 같음... 
# gte (Greater-than or equal to) - 이상 (같거나 큼)
# gt (Greater-than) – 초과 (큼) =>  '>'
# lte (Less-than or equal to) - 이하 (같거나 작음)
# lt (Less-than) - 미만 (작음) => '<'

PUT _bulk
{"index":{"_index":"account","_id":"1"}}
{"account_number":1,"balance":3926,"firstname":"Amber","lastname":"Duke","age":7,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}
{"index":{"_index":"account","_id":"2"}}
{"account_number":2,"balance":5282,"firstname":"Hattie","lastname":"Bond","age":7,"gender":"M","address":"271 Bristol Street","employer":"Netagy","email":"hattiebond@netagy.com","city":"Dante","state":"TN"}
{"index":{"_index":"account","_id":"3"}}
{"account_number":3,"balance":7838,"firstname":"Nanette","lastname":"Bates","age":28,"gender":"F","address":"789 Madison Street","employer":"Quility","email":"nanettebates@quility.com","city":"Nogal","state":"VA"}
{"index":{"_index":"account","_id":"4"}}
{"account_number":4,"balance":440,"firstname":"Dale","lastname":"Adams","age":33,"gender":"M","address":"427 Hutchinson Court","employer":"Boink","email":"daleadams@boink.com","city":"Orick","state":"MD"}
{"index":{"_index":"account","_id":"5"}}
{"account_number":5,"balance":1244,"firstname":"Elinor","lastname":"Ratliff","age":7,"gender":"M","address":"282 Kings Place","employer":"Scentric","email":"elinorratliff@scentric.com","city":"Ribera","state":"WA"}
{"index":{"_index":"account","_id":"6"}}
{"account_number":6,"balance":40540,"firstname":"Virginia","lastname":"Ayala","age":39,"gender":"F","address":"171 Putnam Avenue","employer":"Filodyne","email":"virginiaayala@filodyne.com","city":"Nicholson","state":"PA"}
{"index":{"_index":"account","_id":"7"}}
{"account_number":7,"balance":48082,"firstname":"Dillard","lastname":"Mcpherson","age":34,"gender":"F","address":"702 Quentin Street","employer":"Quailcom","email":"dillardmcpherson@quailcom.com","city":"Veguita","state":"IN"}

GET account/_search
{
  "query": {
    "range": {
      "age": {
        "gte": 10,
        "lte": 40
      }
    }
  }
}

# balance가 4000 이상
GET account/_search
{
  "query": {
    "range": {
      "balance": {
        "gte": 4000
      }
    }
  }
}


# 기존까지는 데이터로 index(table) 직접 생성
# movie_search는 구조부터 직접 생서
# rest api 관점에서 post(새로 생성, 수정), put(수정, 생성)
# es에서 post는 수정 권장, put은 새로 생성 권장
# RDBMS의 table 생성과 동일
PUT movie_search
{
  "mappings": {
    "properties": {
      "movieCd": {
        "type": "keyword"
      },
      "movieNm": {
        "type": "text",
        "analyzer": "standard"
      },
      "movieNmEn": {
        "type": "text",
        "analyzer": "standard"
      },
      "prdtYear": {
        "type": "integer"
      },
      "openDt": {
        "type": "integer"
      },
      "typeNm": {
        "type": "keyword"
      },
      "prdtStatNm": {
        "type": "keyword"
      },
      "nationAlt": {
        "type": "keyword"
      },
      "genreAlt": {
        "type": "keyword"
      },
      "repNationNm": {
        "type": "keyword"
      },
      "repGenreNm": {
        "type": "keyword"
      },
      "companies": {
        "properties": {
          "companyCd": {
            "type": "keyword"
          },
          "companyNm": {
            "type": "keyword"
          }
        }
      },
      "directors": {
        "properties": {
          "peopleNm": {
            "type": "keyword"
          }
        }
      }
    }
  }
}


GET movie_search/_search
{
  "size": 20,
  "query": {
    "match_all": {}
  }
}

# 기묘한 가족 검색
GET movie_search/_search
{
  "query": {
    "match_phrase": {
      "movieNm": "기묘한 가족"
    }
  }
}

GET movie_search/_search
{
  "query": {
    "match": {
      "movieNm": "기묘한 가족"
    }
  }
}
