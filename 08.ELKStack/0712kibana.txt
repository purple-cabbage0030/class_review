# 텍스트 분석 analyze API 학습
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop",
    "snowball"
  ]
}


# 여백을 기준으로 나뉜 term들을 모두 다 소문자로 변환(filtering)
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase"
  ]
}

# stop: 불용어 - the, and, to, etc.
# 대문자 시작 the는 불용어로 간주하지 않음
GET _analyze
{
  "text": "The Articles and the Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop"
  ]
}

# 순서 중요
# 불용어 제거 -> 소문자로 변환
GET _analyze
{
  "text": "The Articles and the Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop",
    "lowercase"
  ]
}


# 소문자로 변환 -> 불용어 제거
GET _analyze
{
  "text": "The Articles and the Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop"
  ]
}

# 검색 시 기본어로 변환되어 검색되는 기능
GET _analyze
{
  "text": "The Articles and the Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "snowball"
  ]
}

# index에 분석기 적용
# my_index가 존재할 경우 삭제
DELETE my_index

# my_index 생성
PUT my_index
{
  "mappings": {
    "properties": {
      "message":{
        "type": "text",
        "analyzer": "snowball"
      }
    }
  }
}

# my_index 데이터 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search

# programming이라는 단어로 해당 문서 검색

GET my_index/_search
{
  "query": {
    "match": {
      "message": "programming"
    }
  }
}

# parses로 검색
GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}

# 사용자 정의 analyzer 개발
# 소문자, 불용어 개별 생성 및 순서 맞춰서 개발

# 소문자화하는 분석기(my1), 불용어 제거 분석기(my2)
# 분석기들을 index 생성 시 적용
# 다수의 field가 존재할 경우 동일한 분석기를 사용(재사용)해야 할 경우 권장하는 구조

DELETE my_index

# my_index에서 사용될 분석기를 사용자 정의로 선언
# mapping 빼면 field 생성 및 세팅이 없는 것
PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "message":{
        "type": "text",
        "analyzer": "my3"
      }
    }
  }
}


# 데이터 검색
GET my_index/_search

# 구조 확인 ==> desc table;
GET my_index/_mapping

# 실시간 데이터를 my_index 적용하면서 분석
# my_index에 데이터 저장 없이 임시 test
# my_index가 보유한 사용자정의 분석기 실행 test
# 저장되는 doc은 없음
GET my_index/_analyze
{
  "analyzer": "my1",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

GET my_index/_analyze
{
  "analyzer": "my2",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

# my_index에 doc 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search
GET my_index/_doc/1


GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}


# 집계 학습

PUT my_stations/_bulk
{"index": {"_id": "1"}}
{"date": "2020-06-01", "line": "1호선", "station": "종각", "passangers": 2314}
{"index": {"_id": "2"}}
{"date": "2020-06-01", "line": "2호선", "station": "강남", "passangers": 5412}
{"index": {"_id": "3"}}
{"date": "2020-07-10", "line": "2호선", "station": "강남", "passangers": 6221}
{"index": {"_id": "4"}}
{"date": "2020-07-15", "line": "2호선", "station": "강남", "passangers": 6478}
{"index": {"_id": "5"}}
{"date": "2020-08-07", "line": "2호선", "station": "강남", "passangers": 5821}
{"index": {"_id": "6"}}
{"date": "2020-08-18", "line": "2호선", "station": "강남", "passangers": 5724}
{"index": {"_id": "7"}}
{"date": "2020-09-02", "line": "2호선", "station": "신촌", "passangers": 3912}
{"index": {"_id": "8"}}
{"date": "2020-09-11", "line": "3호선", "station": "양재", "passangers": 4121}
{"index": {"_id": "9"}}
{"date": "2020-09-20", "line": "3호선", "station": "홍제", "passangers": 1021}
{"index": {"_id": "10"}}
{"date": "2020-10-01", "line": "3호선", "station": "불광", "passangers": 971}

GET my_stations/_mapping

# 강남 이용객 합 집계
# 모든 강남 doc와 집계 결과가 검색됨
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "aggs": {
    "sum_all": {
      "sum": {
        "field": "passangers"
      }
    }
  }
}

GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "size": 0, 
  "aggs": {
    "sum_all": {
      "sum": {
        "field": "passangers"
      }
    }
  }
}

# 필드(이용승객 수) 기준 기초통계자료 집계 검색
GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "p_s": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

# 강남 이용객에 한해서만 기초통계 집계 검색
GET my_stations/_search
{
  "size": 0, 
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "aggs": {
    "tats_p": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

# 호선 개수 counting
# 유니크한 데이터 검색시에는 term 으로 구분되어 있는 데이터값을 keyword로 간주해서 처리
# 1호선, 2호선, 3호선 각각의 단어들이 중복으로 인지되지 않게 해시태그처럼 인식된 구조
# cardinality: 전체 행에 대한 특정 컬럼의 중복수치를 나타내는 지표 또는 유니크한 데이터 개수 카운팅으로 사용되기도 함
GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "unique_line": {
      "cardinality": {
        "field": "line.keyword"
      }
    }
  }
}

# 중복 불허 카운팅
GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "unique_st": {
      "cardinality": {
        "field": "station.keyword"
      }
    }
  }
}

# 각 은행별 이용객 수 기초통계 집계
# 1) 은행 종류 구하기: 농협, 국민, 기업 3가지
GET bank/_mapping

GET bank/_search
{
  "size": 0,
  "aggs": {
    "bank_name": {
      "cardinality": {
        "field": "bank.keyword"
      }
    }
  }
}

# 2-1) 농협 이용객 수 기초통계
GET bank/_search
{
  "size": 0, 
  "query": {
    "match": {
      "bank": "NH농협은행"
    }
  },
  "aggs": {
    "stats_nh": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

# 2-2) 국민 이용객 수 기초통계
GET bank/_search
{
  "size": 0, 
  "query": {
    "match": {
      "bank": "국민은행"
    }
  },
  "aggs": {
    "stats_kb": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

# 2-3) 기업 이용객 수 기초통계
GET bank/_search
{
  "size": 0, 
  "query": {
    "match": {
      "bank": "기업은행"
    }
  },
  "aggs": {
    "stats_ibk": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

# 2018년 이후 은행 이용객 수 총계
GET bank/_search
{
  "query": {
    "range": {
      "date": {
        "gte": "2018-01-01"
      }
    }
  },
  "aggs": {
    "cus_all": {
      "sum": {
        "field": "customers"
      }
    }
  }
}

# 2019년 이후 강남지역 은행 이용객 수 총계
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "location": "강남"
          }
        }
      ], 
      "filter": [
        {
          "range": {
            "date": {
              "gte": "2019-01-01"
            }
          }
        }
      ]
    }
  },
  "aggs": {
    "cus_kn": {
      "sum": {
        "field": "customers"
      }
    }
  }
}
